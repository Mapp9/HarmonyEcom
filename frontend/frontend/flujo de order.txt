1- El usuario se autentica:
    frontend:
        login.component.html:

            <app-header-user></app-header-user>
            <!-- Page Content -->
            <div class="container">

                <div class="card mb-3">
                <div class="row no-gutters">
                    <div class="col-md-5">
                    </div>
                    <div class="col-md-3">
                    <div class="card-body">
                        <h2>Ingresar</h2>

                    </div>
                    </div>
                </div>
                </div>

                
                <form  (ngSubmit)="login()">
                <div class="form-group my-3">
                    <label for="email"> Email:  </label>      
                    <input [(ngModel)]="username" type="email" class="form-control" id="email" name="email" placeholder="Ingrese su email" required autocomplete="off"> 

                </div>

                <div class="form-group my-3">
                    <label for="pwd"> Contraseña:</label>
                    <input [(ngModel)]="password" type="password"  class="form-control" id="password" name="password" placeholder="Ingrese su contraseña" required>       
                </div>

                <div class="form-group my-3">
                    <div class="col-sm-2">
                    <button type="submit" class="btn btn-dark"> <span class="glyphicon glyphicon-ok"></span> Ingresar</button>
                    </div>      
                </div>    
                </form>
                <a [routerLink]="['/user/register']" class="card-link my-3">Si aún no tiene cuenta aqui puede registrarse</a>
            </div>
            <!-- /.container -->

        login.component.ts:

            import { Component, OnInit } from '@angular/core';
            import { Router } from '@angular/router';
            import { Userdto } from 'src/app/common/userdto';
            import { AuthenticationService } from 'src/app/services/authentication.service';
            import { SessionStorageService } from 'src/app/services/session-storage.service';

            @Component({
            selector: 'app-login',
            templateUrl: './login.component.html',
            styleUrls: ['./login.component.css']
            })
            export class LoginComponent implements OnInit {
            username : string = '';
            password : string = '';

            ngOnInit(): void {
            }

            constructor(private authentication : AuthenticationService, private sessionStorage : SessionStorageService, private router : Router) {}

            login(){
                let userDto = new Userdto(this.username, this.password);
                this.authentication.login(userDto).subscribe(
                token => {
                    console.log(token);
                    this.sessionStorage.setItem('token', token);
                    if(token.type == 'ADMIN'){
                    this.router.navigate(['/admin/product']);
                    }else{
                    this.router.navigate(['/']);
                    }

                }
                )
                console.log(userDto);
            }

            }

        userdto.ts:

            export class Userdto {

                constructor(public username:string, public password:string) {

                }
            }

        authentication.service.ts:

            import { HttpClient } from '@angular/common/http';
            import { Injectable } from '@angular/core';
            import { User } from '../common/user';
            import { Observable } from 'rxjs';
            import { Userdto } from '../common/userdto';
            import { Jwtclient } from '../common/jwtclient';

            @Injectable({
            providedIn: 'root'
            })
            export class AuthenticationService {
            private apiUrl : string = 'http://localhost:8085/api/v1/security';

            constructor(private httpClient : HttpClient) { }


            registrer(user : User):Observable<User>{
                return this.httpClient.post<User>(this.apiUrl+"/registrer", user);
            }

            login(userDto:Userdto):Observable<Jwtclient>{
                return this.httpClient.post<Jwtclient>(this.apiUrl+"/login", userDto)
            }
            }

        session-storage.service.ts:

            import { Injectable } from '@angular/core';

            @Injectable({
            providedIn: 'root'
            })
            export class SessionStorageService {

            constructor() { }

            setItem(key:string, value:any){
                sessionStorage.setItem(key,JSON.stringify(value));
            }

            getItem(key:string){
                const item = sessionStorage.getItem(key);
                return item ? JSON.parse(item) : null;
            }

            removeItem(key:string){
                sessionStorage.removeItem(key);
            }

            clear(){
                sessionStorage.clear();
            }
            }

    backend:

        LoginController.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.rest;


            import com.harmonydealer.ecommerce.backend.application.UserService;
            import com.harmonydealer.ecommerce.backend.domain.model.User;
            import com.harmonydealer.ecommerce.backend.infrastructure.dto.JWTClient;
            import com.harmonydealer.ecommerce.backend.infrastructure.dto.UserDTO;
            import com.harmonydealer.ecommerce.backend.infrastructure.jwt.JWTGenerator;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.http.HttpStatus;
            import org.springframework.http.ResponseEntity;
            import org.springframework.security.authentication.AuthenticationManager;
            import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
            import org.springframework.security.core.Authentication;
            import org.springframework.security.core.context.SecurityContextHolder;
            import org.springframework.web.bind.annotation.*;

            @RestController
            @RequestMapping("/api/v1/security")
            @CrossOrigin(origins = "http://localhost:4200")
            @Slf4j
            public class LoginController {

                private final AuthenticationManager authenticationManager;
                private final JWTGenerator jwtGenerator;
                private final UserService userService;

                public LoginController(AuthenticationManager authenticationManager, JWTGenerator jwtGenerator, UserService userService) {
                    this.authenticationManager = authenticationManager;
                    this.jwtGenerator = jwtGenerator;
                    this.userService = userService;
                }

                @PostMapping("/login")
                public ResponseEntity<JWTClient> login(@RequestBody UserDTO userDTO){
                    log.info("Success");
                    Authentication authentication = authenticationManager.authenticate(
                            new UsernamePasswordAuthenticationToken(userDTO.username(),userDTO.password())
                    );

                    SecurityContextHolder.getContext().setAuthentication(authentication);
                    log.info("El role de usuario es: {}", SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().findFirst().get().toString());

                    User user = userService.findByEmail(userDTO.username());

                    String token = jwtGenerator.getToken(userDTO.username());
                    JWTClient jwtClient = new JWTClient(user.getId(), token, user.getUserType().toString());

                    return new ResponseEntity<>(jwtClient, HttpStatus.OK);
                }
            }

        JWTClient.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.dto;

            public record JWTClient(Integer id, String token, String type) {
            }

        UserDTO.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.dto;

            public record UserDTO(String username, String password) {
            }

        User.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            import lombok.AllArgsConstructor;
            import lombok.Data;
            import lombok.NoArgsConstructor;

            import java.time.LocalDateTime;

            @Data
            @AllArgsConstructor
            @NoArgsConstructor
            public class User {
                private Integer id;
                private String username;
                private String firstName;
                private String lastName;
                private String email;
                private String address;
                private String cellphone;
                private String password;
                private UserType userType;
                private LocalDateTime dateCreated;
                private LocalDateTime dateUpdated;
            }

        UserType.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            public enum UserType {
                ADMIN, USER
            }


        UserService.java:

            package com.harmonydealer.ecommerce.backend.application;

            import com.harmonydealer.ecommerce.backend.domain.model.User;
            import com.harmonydealer.ecommerce.backend.domain.port.IUserRepository;
            import lombok.AllArgsConstructor;

            @AllArgsConstructor
            public class UserService {
                private final IUserRepository iUserRepository;

                public User save(User user){
                    return this.iUserRepository.save(user);
                }
                public Iterable<User> findAll(){
                    return this.iUserRepository.findAll();
                }
                public User findById(Integer id){
                    return this.iUserRepository.findById(id);
                }
                public User findByEmail(String email){
                    return this.iUserRepository.findByEmail(email);
                }
            }

        IUserRepository.java:

            package com.harmonydealer.ecommerce.backend.domain.port;

            import com.harmonydealer.ecommerce.backend.domain.model.User;

            public interface IUserRepository {
                User save(User user);
                Iterable<User> findAll();
                User findByEmail(String email);
                User findById(Integer id);
            }



        JWTGenerator.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.jwt;


            import io.jsonwebtoken.Jwts;
            import io.jsonwebtoken.SignatureAlgorithm;
            import org.springframework.security.core.GrantedAuthority;
            import org.springframework.security.core.authority.AuthorityUtils;
            import org.springframework.security.core.context.SecurityContextHolder;
            import org.springframework.stereotype.Service;

            import java.util.Date;
            import java.util.List;
            import java.util.stream.Collectors;

            import static com.harmonydealer.ecommerce.backend.infrastructure.jwt.Constants.*;

            @Service
            public class JWTGenerator {
                public String getToken(String username){
                    List<GrantedAuthority> authorityList = AuthorityUtils.commaSeparatedStringToAuthorityList(
                            SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().findFirst().toString()
                    );

                    String token = Jwts.builder()
                            .setId("ecommerce")
                            .setSubject(username)
                            .claim("authorities",authorityList.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                            .setIssuedAt(new Date(System.currentTimeMillis()))
                            .setExpiration(new Date(System.currentTimeMillis()+TOKEN_EXPIRATION_TIME))
                            .signWith(getSignedKey(SUPER_SECRET_KEY), SignatureAlgorithm.HS512).compact();

                    return "Bearer "+token;
                }

            }

        Constants.java:
            package com.harmonydealer.ecommerce.backend.infrastructure.jwt;

            import io.jsonwebtoken.security.Keys;

            import java.nio.charset.StandardCharsets;
            import java.security.Key;

            public class Constants {
                public static final String HEADER_AUTHORIZATION = "Authorization";
                public static final String TOKEN_BEARER_PREFIX = "Bearer ";

                public static final String SUPER_SECRET_KEY = "fniZhrPyN7rG4v6H0b45v3DGulvN907STIM4qiOVXhAJMBJCcvZjv8A9CP50s5qqrOKF4vVtZXB";

                public static final long TOKEN_EXPIRATION_TIME = 1500000;

                public static Key getSignedKey(String secretKey){
                    byte [] keyBytes = secretKey.getBytes(StandardCharsets.UTF_8);
                    return Keys.hmacShaKeyFor(keyBytes);
                }
            }


2- muestra de los productos en la homepage:
    frontend:
        home.component.html
            <!-- Navigation -->
            <app-header-user></app-header-user>

            <!-- Page Content -->
            <div class="container">
            <header class="jumbotron my-4">
                <h1 class="display-3">Bienvenido a Harmony Dealer</h1>
                <p class="lead">Tu tienda de productos músicales en Línea</p>
            </header>

            <div class="main-content">
                <div class="section-content section-content-p30">
                <div class="container-fluid">
                    <div class="row">
                    <div *ngFor="let p of products" class="col-md-3">

                        <div class="product-box">
                        <img src="{{p.urlImage}}">
                        <h2 class="card-text">{{p.name}}</h2>
                        <div class="price">{{p.price | currency:'USD':'symbol':'1.0-0'}}</div>
                        <div class="product-show">
                            <a [routerLink]="['/cart/detailproduct', p.id]" class="primary-btn">Ver producto</a>
                        </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>

            <!-- Footer -->
            <footer class="container-fluid py-2 bg-dark">
            <div class="row mt-2">
                <div class="col text-start" style="margin-top: auto;">
                <h2 class="text-center">Información de Contacto</h2>
                <ul class="nav flex-column m-3">
                    <li class="nav-item p-2">
                    <i class="bi bi-geo-alt"></i> Dirección: Calle 100 # 45 -38
                    </li>
                    <li class="nav-item p-2">
                    <i class="bi bi-telephone"></i> Teléfono: 310 123 45678
                    </li>
                    <li class="nav-item p-2">
                    <i class="bi bi-envelope"></i> Correo: <a class="text-decoration-none text-light"
                        href="mailto:mpp.adso@gmail.com">mpp.adso&#64;gmail.com</a>
                    </li>
                </ul>

                </div>
                <div class="col">
                <img src="/assets/logo-letras.png" alt="Harmony Dealer" style="width: 500px; margin-bottom: auto;">
                <p class="m-2 text-center text-white">Copyright &copy;HarmonyDealer2024</p>
                </div>
                <div class="col" style="margin-top: auto;">
                <h2 class="text-center" >Mapa del Sitio</h2>
                <ul class="nav flex-column m-3">
                    <li class="nav-item">
                    <a class="nav-link" href="#">Sobre Nosotros</a>
                    </li>
                    <li class="nav-item">
                    <a class="nav-link" href="#">PQRS</a>
                    </li>
                    <li class="nav-item">
                    <a class="nav-link" href="#">Productos</a>
                    </li>
                </ul>
                </div>
            </div>
            <!-- /.container -->
            </footer>

        home.component.ts:
            import { Component, OnInit } from '@angular/core';
            import { Product } from 'src/app/common/product';
            import { HomeService } from 'src/app/services/home.service';
            import { ProductService } from 'src/app/services/product.service';

            @Component({
            selector: 'app-home',
            templateUrl: './home.component.html',
            styleUrls: ['./home.component.css']
            })
            export class HomeComponent implements OnInit{
            products: Product[] = [];
            constructor(private homeService:HomeService){

            }
            ngOnInit(): void {
                this.homeService.getProducts().subscribe(
                data => this.products = data
                );
            }

            }

        home.service.ts:

            import { HttpClient } from '@angular/common/http';
            import { Injectable } from '@angular/core';
            import { Observable } from 'rxjs';
            import { Product } from '../common/product';

            @Injectable({
            providedIn: 'root'
            })
            export class HomeService {

            private apiUrl: string = "http://localhost:8085/api/v1/home";
            constructor(private httpClient:HttpClient) { }

            getProducts():Observable<Product[]>{
                return this.httpClient.get<Product[]>(this.apiUrl);
            }

            getProductById(id:number):Observable<Product>{
                return this.httpClient.get<Product>(this.apiUrl + "/" + id);
                }
            }


        product.ts:
            export class Product {
            constructor(
                public id: number,
                public name: string,
                public code: string,
                public description: string,
                public price: number,
                public urlImage: string,
                public image: File,
                public userId: string,
                public categoryId: string
            ){}
            }

    backend:

        HomeController.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.rest;


            import com.harmonydealer.ecommerce.backend.application.ProductService;
            import com.harmonydealer.ecommerce.backend.domain.model.Product;
            import org.springframework.http.ResponseEntity;
            import org.springframework.web.bind.annotation.*;

            @RestController
            @RequestMapping("/api/v1/home")
            @CrossOrigin(origins = "http://localhost:4200")
            public class HomeController {
                private final ProductService productService;

                public HomeController(ProductService productService) {
                    this.productService = productService;
                }

                @GetMapping
                public ResponseEntity<Iterable<Product>> findAll(){
                    return ResponseEntity.ok(productService.findAll());
                }

                @GetMapping("/{id}")
                public ResponseEntity<Product> findById(@PathVariable Integer id){
                    return ResponseEntity.ok(productService.findById(id));
                }
            }

        ProductService.java:

            package com.harmonydealer.ecommerce.backend.application;

            import com.harmonydealer.ecommerce.backend.domain.model.Product;
            import com.harmonydealer.ecommerce.backend.domain.port.IProductRepository;
            import lombok.AllArgsConstructor;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.web.multipart.MultipartFile;

            import java.io.IOException;

            @AllArgsConstructor
            @Slf4j
            public class ProductService {
                private final IProductRepository iProductRepository;
                private final UploadFile uploadFile;


                public Product save(Product product, MultipartFile multipartFile) throws IOException {
                    if (product.getId()!=0){
                        if (multipartFile==null){
                            product.setUrlImage(product.getUrlImage());
                        }else{
                            String nameFile = product.getUrlImage().substring(29);
                            log.info("Este es el nombre de la imagen: {}", nameFile);
                            if(!nameFile.equals("default.jpg")){
                                uploadFile.delete(nameFile);
                            }
                            product.setUrlImage(uploadFile.upload(multipartFile));
                        }
                    }else{
                        product.setUrlImage(uploadFile.upload(multipartFile));
                    }
                    return this.iProductRepository.save(product);
                }
                public Iterable<Product> findAll(){
                    return this.iProductRepository.findAll();
                }
                public Product findById(Integer id){
                    return this.iProductRepository.findById(id);
                }
                public void deleteById(Integer id){
                    Product product = findById(id);
                    String nameFile = product.getUrlImage().substring(29);
                    log.info("Este es el Nombre de la imagen: {}", nameFile);
                    if(!nameFile.equals("default.jpg")){
                        uploadFile.delete(nameFile);
                    }
                    this.iProductRepository.deleteById(id);
                }
            }

        IProductRepository:

            package com.harmonydealer.ecommerce.backend.domain.port;

            import com.harmonydealer.ecommerce.backend.domain.model.Product;

            public interface IProductRepository {
                Product save(Product product);
                Iterable<Product> findAll();
                Product findById(Integer id);
                void deleteById(Integer id);
            }


        Product.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            import lombok.AllArgsConstructor;
            import lombok.Data;
            import lombok.NoArgsConstructor;

            import java.math.BigDecimal;
            import java.time.LocalDateTime;

            @Data
            @AllArgsConstructor
            @NoArgsConstructor
            public class Product {
                private Integer id;
                private String name;
                private String code;
                private String description;
                private String urlImage;
                private BigDecimal price;
                private LocalDateTime dateCreated;
                private LocalDateTime dateUpdated;
                private Integer userId;
                private Integer categoryId;
            }

        IProductRepository.java:

            package com.harmonydealer.ecommerce.backend.domain.port;

            import com.harmonydealer.ecommerce.backend.domain.model.Product;

            public interface IProductRepository {
                Product save(Product product);
                Iterable<Product> findAll();
                Product findById(Integer id);
                void deleteById(Integer id);
            }

        UploadFile.java:

            package com.harmonydealer.ecommerce.backend.application;

            import org.springframework.web.multipart.MultipartFile;

            import java.io.File;
            import java.io.IOException;
            import java.nio.file.Files;
            import java.nio.file.Path;
            import java.nio.file.Paths;

            public class UploadFile {
                private final String FOLDER = "src//main//resources//static//images//";
                private final String IMG_DEFAULT = "default.jpg";
                private final String URL = "http://localhost:8085/images/";

                public String upload (MultipartFile multipartFile) throws IOException {
                    if(multipartFile!=null){
                        byte[] bytes = multipartFile.getBytes();
                        Path path = Paths.get(FOLDER+multipartFile.getOriginalFilename());
                        Files.write(path, bytes);
                        return URL+multipartFile.getOriginalFilename();
                    }
                    return URL+IMG_DEFAULT;
                }
                public void delete(String nameFile){
                    File file = new File(FOLDER+nameFile);
                    file.delete();
                }
            }

3- añadir productos al carrito:
    
    frontend:

        detail-product.component.html:

            <!-- Page Content -->
            <div class="container">


                <!-- Page Heading/Breadcrumbs -->
                <h1 class="mt-4 mb-3">
                Harmony Dealer <small class="badge bg-secondary">Productos</small>
                </h1>

                <ol class="breadcrumb">
                <li class="breadcrumb-item"><a [routerLink]="['/']">Home</a></li>
                <li class="breadcrumb-item active">Producto</li>
                </ol>

                <!-- Blog Post -->
                <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                    <div class="col-lg-6">
                        <a href="#"> <img class="img-fluid rounded"
                        src="{{urlImage}}"  alt="">
                        </a>
                    </div>
                    <div class="col-lg-6">
                        <form action="#" method="POST">
                        <h2 class="card-title">{{name}}</h2>

                        <ul class="list-group">
                            <li class="list-group-item"><h5>Precio: {{price | currency:'USD':'symbol':'1.0-0'}}</h5></li>
                            <li class="list-group-item">
                            <p>Descripción: {{description}}</p>
                            </li>
                            <li class="list-group-item"><h6>
                            Cantidad: <input type="number" [(ngModel)]="quantity" id="quantity" name="quantity" autocomplete="off"
                            min="1" max="5" value="1">
                            </h6></li>
                        </ul>


                        <button (click)="addCart(id)"  class="btn btn-dark mt-3">Añadir al carrito </button>

                        </form>
                    </div>
                    </div>
                </div>
                </div>

            </div>
            <!-- /.container -->

        detail-product.component.ts:

            import { Component, OnInit } from '@angular/core';
            import { ActivatedRoute } from '@angular/router';
            import { ToastrService } from 'ngx-toastr';
            import { ItemCart } from 'src/app/common/item-cart';
            import { CartService } from 'src/app/services/cart.service';
            import { HomeService } from 'src/app/services/home.service';
            import { ProductService } from 'src/app/services/product.service';

            @Component({
            selector: 'app-detail-product',
            templateUrl: './detail-product.component.html',
            styleUrls: ['./detail-product.component.css']
            })
            export class DetailProductComponent implements OnInit {
            id:number = 0;
            name:string = '';
            description:string = '';
            price:number = 0;
            urlImage:string = '';
            quantity:number = 0;


            ngOnInit(): void {
                this.getProductById();
            }

            constructor(private homeService:HomeService, private activatedRoute:ActivatedRoute, private cartService:CartService, private toastr:ToastrService){}

            getProductById(){
                this.activatedRoute.params.subscribe(
                p => {
                    let id = p['id'];
                    if(id){
                    this.homeService.getProductById(id).subscribe(
                        data => {
                        this.id = data.id
                        this.name = data.name;
                        this.description = data.description;
                        this.urlImage = data.urlImage;
                        this.price = data.price;
                        }
                    );
                    }
                }
                );
            }

            addCart(id:number){
                console.log('id product: ', id);
                console.log('name product: ', this.name);
                console.log('price product: ', this.price);
                console.log('quantity product: ', this.quantity);

                let item = new ItemCart(id, this.name, this.quantity, this.price);

                this.cartService.addItemCart(item);

                console.log("Total carrito: "+this.cartService.totalCart());
                console.log(this.cartService.totalCart())

                this.toastr.success('Producto añadido al carrito de compras', 'Carrito compras');
            }
            }


        home.service.ts:

            import { HttpClient } from '@angular/common/http';
            import { Injectable } from '@angular/core';
            import { Observable } from 'rxjs';
            import { Product } from '../common/product';

            @Injectable({
            providedIn: 'root'
            })
            export class HomeService {

            private apiUrl: string = "http://localhost:8085/api/v1/home";
            constructor(private httpClient:HttpClient) { }

            getProducts():Observable<Product[]>{
                return this.httpClient.get<Product[]>(this.apiUrl);
            }

            getProductById(id:number):Observable<Product>{
                return this.httpClient.get<Product>(this.apiUrl + "/" + id);
                }
            }

        sumary-order.component.html:

            <div class="container">

                <!-- Page Heading/Breadcrumbs -->
                <h1 class="mt-4 mb-3">
                    Harmony Dealer <small class="badge bg-secondary">Productos</small>
                </h1>

                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a [routerLink]="['/']">Home</a></li>
                    <li class="breadcrumb-item active">Orden</li>
                </ol>

                <!-- Blog Post -->
                <div class="card mb-4">
                    <div class="card-body">
                    <div class="row">
                        <div class="col-lg-9">
                        <div class="card-body">
                            <h5 class="card-title">
                            DATOS ORDEN
                            </h5>
                            <h6><strong> Nombre: </strong> {{firstName}} {{lastName}}</h6>
                            <h6><strong>Correo: </strong> {{email}} </h6>
                            <h6><strong> Dirección: </strong> {{address}}</h6>

                            <h5 class="card-title">
                            PRODUCTOS
                            </h5>
                            <table class="table">
                                <thead>
                                <tr>
                                    <th scope="col">Producto</th>
                                    <th scope="col">Precio</th>
                                    <th scope="col">Cantidad</th>
                                    <th scope="col">Total</th>
                                    <th>Eliminar</th>
                                </tr>
                                </thead>
                                <tbody>
                                    <tr *ngFor="let item of items">
                                        <td>{{item.productName}}</td>
                                        <td>{{item.price}}</td>
                                        <td>{{item.quantity}}</td>
                                        <td>{{item.getTotalPriceItem()}}</td>
                                        <td><button class="btn btn-danger" (click)="deleteItemCart(item.productId)" >Quitar</button> </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        </div>


                        <div class="col-lg-3">
                        <h2 class="card-title">Resumen Orden</h2>

                        <ul class="list-group">
                            <li class="list-group-item">
                            <h5> Total: {{totalCart | currency:'USD':'symbol':'1.0-0'}}</h5>
                            </li>
                            <a class="btn btn-dark" (click)="generateOrder()">Pagar con Paypal</a>
                        </ul>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        sumary-order.component.ts:

            import { Component, OnInit } from '@angular/core';
            import { DataPayment } from 'src/app/common/data-payment';
            import { ItemCart } from 'src/app/common/item-cart';
            import { Order } from 'src/app/common/order';
            import { OrderProduct } from 'src/app/common/order-product';
            import { OrderState } from 'src/app/common/order-state';
            import { CartService } from 'src/app/services/cart.service';
            import { OrderService } from 'src/app/services/order.service';
            import { PaymentService } from 'src/app/services/payment.service';
            import { SessionStorageService } from 'src/app/services/session-storage.service';
            import { UserService } from 'src/app/services/user.service';

            @Component({
            selector: 'app-sumary-order',
            templateUrl: './sumary-order.component.html',
            styleUrls: ['./sumary-order.component.css']
            })
            export class SumaryOrderComponent implements OnInit {

            items : ItemCart [] = [];
            totalCart : number = 0;
            firstName : string = '';
            lastName : string = '';
            email : string = '';
            address : string = '';
            orderProducts :OrderProduct [] = [];
            userId : number = 0;

            constructor(private cartService:CartService,
                private userService:UserService,
                private orderService:OrderService,
                private paymentService:PaymentService,
                private sessionStorage: SessionStorageService
                ){}

            ngOnInit(): void {
                this.items = this.cartService.convertToListFromMap();
                this.totalCart = this.cartService.totalCart();
                this.userId = this.sessionStorage.getItem('token').id;
                this.getUserById(this.userId);
                setTimeout(
                ()=>{
                    this.sessionStorage.removeItem('token');
                }, 600000
                );
            }
            


            generateOrder(){
                this.items.forEach(
                item =>{
                    let orderProduct = new OrderProduct(null, item.productId, item.quantity, item.price);
                    this.orderProducts.push(orderProduct);
                }
                );
                
                let order = new Order(null, new Date(), this.orderProducts, this.userId, OrderState.CANCELLED);
                console.log('Order: '+order.orderState);
                this.orderService.createOrder(order).subscribe(
                data => {
                    console.log('Orden creada con ID: '+ data.id);
                    this.sessionStorage.setItem('order',data);
                }
                );

                let urlPayment;
                let dataPayment = new DataPayment('PAYPAL', this.totalCart.toString(),'USD','COMPRA');

                this.paymentService.getUrlPaypalPayment(dataPayment).subscribe(
                data => {
                    urlPayment = data.url;
                    console.log('Respuesta exitosa...');
                    window.location.href = urlPayment;
                }
                );


            }

            deleteItemCart(productId:number){
            this.cartService.deleteItemCart(productId);
            this.items = this.cartService.convertToListFromMap();
            this.totalCart = this.cartService.totalCart();

            }

            getUserById(id:number){
                this.userService.getUserById(id).subscribe(
                data => {
                    this.firstName = data.firstName
                    this.lastName = data.lastName;
                    this.email = data.email;
                    this.address = data.address;
                }
                )
            }

            }


        product.ts:


            export class Product {
            constructor(
                    public id: number,
                    public name: string,
                    public code: string,
                    public description: string,
                    public price: number,
                    public urlImage: string,
                    public image: File,
                    public userId: string,
                    public categoryId: string
                ){}
            }


        cart.service.ts:

            import { Injectable } from '@angular/core';
            import { ItemCart } from '../common/item-cart';

            @Injectable({
            providedIn: 'root'
            })
            export class CartService {
                private items: Map<number, ItemCart> = new Map<number, ItemCart>();

                itemList : ItemCart [] = [];


                constructor() { }

                addItemCart(itemCart: ItemCart){
                    this.items.set(itemCart.productId, itemCart);
                }

                deleteItemCart(productId:number){
                    this.items.delete(productId);
                    this.items.forEach(
                    (valor, clave) => {
                        console.log('Esta es la clave y su valor: '+clave, valor);
                    } 
                    );
                }

                totalCart(){
                    let totalCart: number = 0;
                    this.items.forEach(
                    (item, clave)=>{
                        totalCart+=item.getTotalPriceItem();
                        console.log(`Item: ${clave}, Precio: ${item.getTotalPriceItem()}, Total parcial: ${totalCart}`);
                    }
                    );
                    console.log(`Total final del carrito: ${totalCart}`);
                    return totalCart;
                }

                convertToListFromMap(){
                    this.itemList.splice(0,this.itemList.length);
                    this.items.forEach(
                    (item, clave)=>{
                        this.itemList.push(item);
                    }
                    );

                    return this.itemList;
                }
            }

        item-cart:

            export class ItemCart {
                constructor(public productId:number, public productName:string, public quantity:number, public price:number){

                }

                getTotalPriceItem(){
                    return this.quantity * this.price;
                }
            }

    backend:

        HomeController.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.rest;


            import com.harmonydealer.ecommerce.backend.application.ProductService;
            import com.harmonydealer.ecommerce.backend.domain.model.Product;
            import org.springframework.http.ResponseEntity;
            import org.springframework.web.bind.annotation.*;

            @RestController
            @RequestMapping("/api/v1/home")
            @CrossOrigin(origins = "http://localhost:4200")
            public class HomeController {
                private final ProductService productService;

                public HomeController(ProductService productService) {
                    this.productService = productService;
                }

                @GetMapping
                public ResponseEntity<Iterable<Product>> findAll(){
                    return ResponseEntity.ok(productService.findAll());
                }

                @GetMapping("/{id}")
                public ResponseEntity<Product> findById(@PathVariable Integer id){
                    return ResponseEntity.ok(productService.findById(id));
                }
            }


        ProductService.java:

            package com.harmonydealer.ecommerce.backend.application;

            import com.harmonydealer.ecommerce.backend.domain.model.Product;
            import com.harmonydealer.ecommerce.backend.domain.port.IProductRepository;
            import lombok.AllArgsConstructor;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.web.multipart.MultipartFile;

            import java.io.IOException;

            @AllArgsConstructor
            @Slf4j
            public class ProductService {
                private final IProductRepository iProductRepository;
                private final UploadFile uploadFile;


                public Product save(Product product, MultipartFile multipartFile) throws IOException {
                    if (product.getId()!=0){
                        if (multipartFile==null){
                            product.setUrlImage(product.getUrlImage());
                        }else{
                            String nameFile = product.getUrlImage().substring(29);
                            log.info("Este es el nombre de la imagen: {}", nameFile);
                            if(!nameFile.equals("default.jpg")){
                                uploadFile.delete(nameFile);
                            }
                            product.setUrlImage(uploadFile.upload(multipartFile));
                        }
                    }else{
                        product.setUrlImage(uploadFile.upload(multipartFile));
                    }
                    return this.iProductRepository.save(product);
                }
                public Iterable<Product> findAll(){
                    return this.iProductRepository.findAll();
                }
                public Product findById(Integer id){
                    return this.iProductRepository.findById(id);
                }
                public void deleteById(Integer id){
                    Product product = findById(id);
                    String nameFile = product.getUrlImage().substring(29);
                    log.info("Este es el Nombre de la imagen: {}", nameFile);
                    if(!nameFile.equals("default.jpg")){
                        uploadFile.delete(nameFile);
                    }
                    this.iProductRepository.deleteById(id);
                }
            }


        IProductRepository.java:

            package com.harmonydealer.ecommerce.backend.domain.port;

            import com.harmonydealer.ecommerce.backend.domain.model.Product;

            public interface IProductRepository {
                Product save(Product product);
                Iterable<Product> findAll();
                Product findById(Integer id);
                void deleteById(Integer id);
            }


        OrderController.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.rest;

                import com.harmonydealer.ecommerce.backend.application.OrderService;
                import com.harmonydealer.ecommerce.backend.domain.model.Order;
                import com.harmonydealer.ecommerce.backend.domain.model.OrderState;
                import lombok.AllArgsConstructor;
                import lombok.extern.slf4j.Slf4j;
                import org.springframework.http.ResponseEntity;
                import org.springframework.web.bind.annotation.*;

                @RestController
                @RequestMapping("/api/v1/orders")
                @Slf4j
                @AllArgsConstructor
                @CrossOrigin(origins = "http://localhost:4200")
                public class OrderController {
                    private final OrderService orderService;

                    @PostMapping
                    public ResponseEntity<Order> save(@RequestBody Order order){
                        if (order.getOrderState().toString().equals(OrderState.CANCELLED.toString())){
                            order.setOrderState(OrderState.CANCELLED);
                        }else {
                            order.setOrderState(OrderState.CONFIRMED);
                        }

                        return ResponseEntity.ok(orderService.save(order));
                    }

                    @PostMapping("/update/state/order")
                    public ResponseEntity updateStateById(@RequestParam Integer id, @RequestParam String state){
                        orderService.updateStateById(id, state);
                        return ResponseEntity.ok().build();
                    }

                    @GetMapping
                    public ResponseEntity<Iterable<Order>> findAll(){
                        return ResponseEntity.ok(orderService.findAll());
                    }

                    @GetMapping("/{variable}")
                    public ResponseEntity<Order> findById(@PathVariable("variable") Integer id){
                        return ResponseEntity.ok(orderService.findById(id));
                    }

                    @GetMapping("/by-user/{id}")
                    public ResponseEntity<Iterable<Order>> findByUserId(@PathVariable("id") Integer userId){
                        return ResponseEntity.ok(orderService.findByUserId(userId));
                    }

                }


        OrderService.java:

            package com.harmonydealer.ecommerce.backend.application;

            import com.harmonydealer.ecommerce.backend.domain.model.Order;
            import com.harmonydealer.ecommerce.backend.domain.port.IOrderRepository;
            import lombok.AllArgsConstructor;

            @AllArgsConstructor
            public class OrderService {

                private final IOrderRepository iOrderRepository;

                public Order save (Order order){
                    return this.iOrderRepository.save(order);
                }
                public Iterable<Order> findAll(){
                    return this.iOrderRepository.findAll();
                }
                public Order findById(Integer id){
                    return this.iOrderRepository.findById(id);
                }
                public Iterable<Order> findByUserId(Integer userId){
                    return this.iOrderRepository.findByUserId(userId);
                }
                public void updateStateById(Integer id, String state){
                    this.iOrderRepository.updateStateById(id, state);
                }
            }


        OrderCrudRepositoryImpl.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.adapter;

            import com.harmonydealer.ecommerce.backend.domain.model.Order;
            import com.harmonydealer.ecommerce.backend.domain.model.OrderState;
            import com.harmonydealer.ecommerce.backend.domain.port.IOrderRepository;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.OrderEntity;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.UserEntity;
            import com.harmonydealer.ecommerce.backend.infrastructure.mapper.IOrderMapper;
            import lombok.AllArgsConstructor;
            import org.springframework.stereotype.Repository;

            @Repository
            @AllArgsConstructor
            public class OrderCrudRepositoryImpl implements IOrderRepository {
                private final IOrderCrudRepository iOrderCrudRepository;
                private final IOrderMapper iOrderMapper;


                @Override
                public Order save(Order order) {
                    OrderEntity orderEntity = iOrderMapper.toOrderEntity(order);

                    orderEntity.getOrderProducts().forEach(
                            orderProductEntity -> orderProductEntity.setOrderEntity(orderEntity)
                    );
                    return iOrderMapper.toOrder(iOrderCrudRepository.save(orderEntity));
                }

                @Override
                public Order findById(Integer id) {
                    return iOrderMapper.toOrder(iOrderCrudRepository.findById(id).orElseThrow(
                            () -> new RuntimeException("Orden con ID: " + id + " no encontrada.")
                    ));
                }

                @Override
                public Iterable<Order> findAll() {
                    return iOrderMapper.toOrderList(iOrderCrudRepository.findAll());
                }

                @Override
                public Iterable<Order> findByUserId(Integer userId) {
                    UserEntity userEntity = new UserEntity();
                    userEntity.setId(userId);
                    return iOrderMapper.toOrderList(iOrderCrudRepository.findByUserEntity(userEntity));
                }

                @Override
                public void updateStateById(Integer id, String state) {
                    if (state.equals(OrderState.CANCELLED)){
                        iOrderCrudRepository.updateStateById(id, OrderState.CANCELLED);
                    }else {
                        iOrderCrudRepository.updateStateById(id, OrderState.CONFIRMED);
                    }
                }
            }


        IOrderCrudRepository.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.adapter;

            import com.harmonydealer.ecommerce.backend.domain.model.OrderState;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.OrderEntity;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.UserEntity;
            import org.springframework.data.jpa.repository.Modifying;
            import org.springframework.data.jpa.repository.Query;
            import org.springframework.data.repository.CrudRepository;
            import org.springframework.transaction.annotation.Transactional;

            public interface IOrderCrudRepository extends CrudRepository<OrderEntity, Integer> {
                @Transactional
                @Modifying
                @Query("UPDATE OrderEntity o SET o.orderState = :state WHERE o.id = :id")
                void updateStateById(Integer id, OrderState state);

                Iterable<OrderEntity> findByUserEntity(UserEntity userEntity);
            }


        IOrderRepository.java:

            package com.harmonydealer.ecommerce.backend.domain.port;

            import com.harmonydealer.ecommerce.backend.domain.model.Order;

            public interface IOrderRepository {
                Order save (Order order);
                Order findById(Integer id);
                Iterable<Order> findAll();
                Iterable<Order> findByUserId(Integer userId);
                void updateStateById(Integer id, String state);
            }


        OrderEntity.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.entity;

            import com.harmonydealer.ecommerce.backend.domain.model.OrderState;
            import jakarta.persistence.*;
            import lombok.Data;
            import org.hibernate.annotations.CreationTimestamp;

            import java.time.LocalDateTime;
            import java.util.List;


            @Data
            @Entity
            @Table(name = "orders")
            public class OrderEntity {

                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Integer id;
                @CreationTimestamp
                private LocalDateTime dateCreated;
                @Enumerated(value = EnumType.STRING)
                private OrderState orderState;
                @ManyToOne
                private UserEntity userEntity;
                @OneToMany(mappedBy = "orderEntity", cascade = CascadeType.PERSIST)
                private List<OrderProductEntity> orderProducts;
            }


        IOrderMapper.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.mapper;

            import com.harmonydealer.ecommerce.backend.domain.model.Order;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.OrderEntity;
            import org.mapstruct.InheritInverseConfiguration;
            import org.mapstruct.Mapper;
            import org.mapstruct.Mapping;
            import org.mapstruct.Mappings;

            @Mapper(componentModel = "spring", uses = {IOrderProductMapper.class})
            public interface IOrderMapper {

                @Mappings(
                        {
                                @Mapping(source = "id", target = "id"),
                                @Mapping(source = "dateCreated", target = "dateCreated"),
                                @Mapping(source = "orderProducts", target = "orderProducts"),
                                @Mapping(source = "orderState", target = "orderState"),
                                @Mapping(source = "userEntity.id", target = "userId")
                        }
                )
                Order toOrder(OrderEntity orderEntity);
                Iterable<Order> toOrderList(Iterable<OrderEntity> orderEntities);

                @InheritInverseConfiguration
                OrderEntity toOrderEntity(Order order);
            }

        Order.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

        import lombok.Data;

        import java.math.BigDecimal;
        import java.time.LocalDateTime;
        import java.util.ArrayList;
        import java.util.List;

        @Data
        public class Order {

            private Integer id;
            private LocalDateTime dateCreated;
            private List<OrderProduct> orderProducts;
            private OrderState orderState;
            private Integer userId;

            public Order() {
                orderProducts = new ArrayList<>();
            }
            public BigDecimal getTotalOrderPrice(){
                return this.orderProducts.stream().map( orderProduct -> orderProduct.getTotalItem()).reduce(BigDecimal.ZERO, BigDecimal::add);
            }
        }


        OrderProductEntity.java:

        package com.harmonydealer.ecommerce.backend.infrastructure.entity;

        import jakarta.persistence.*;
        import lombok.Data;

        import java.math.BigDecimal;

        @Data
        @Entity
        @Table(name = "order_products")
        public class OrderProductEntity {

            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Integer id;
            private BigDecimal quantity;
            private BigDecimal price;
            private Integer productId;
            @ManyToOne
            private OrderEntity orderEntity;
        }


        IOrderProductMapper.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.mapper;

            import com.harmonydealer.ecommerce.backend.domain.model.OrderProduct;
            import com.harmonydealer.ecommerce.backend.infrastructure.entity.OrderProductEntity;
            import org.mapstruct.InheritInverseConfiguration;
            import org.mapstruct.Mapper;
            import org.mapstruct.Mapping;
            import org.mapstruct.Mappings;

            @Mapper(componentModel = "spring")
            public interface IOrderProductMapper {
                @Mappings(
                        {
                                @Mapping(source = "id", target = "id"),
                                @Mapping(source = "quantity", target = "quantity"),
                                @Mapping(source = "price", target = "price"),
                                @Mapping(source = "productId", target = "productId")
                        }
                )
                OrderProduct toOrderProduct(OrderProductEntity orderProductEntity);
                Iterable<OrderProduct> toOrderProductList(Iterable<OrderProductEntity> orderProductEntities);

                @InheritInverseConfiguration
                OrderProductEntity toOrderProductEntity(OrderProduct orderProduct);
            }


        OrderProduct.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.entity;

            import jakarta.persistence.*;
            import lombok.Data;

            import java.math.BigDecimal;

            @Data
            @Entity
            @Table(name = "order_products")
            public class OrderProductEntity {

                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Integer id;
                private BigDecimal quantity;
                private BigDecimal price;
                private Integer productId;
                @ManyToOne
                private OrderEntity orderEntity;
            }


        OrderState.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            public enum OrderState {
                CANCELLED,
                CONFIRMED
            }

4- pago con Paypal:

    frontend:
        
        payment-success.component.html:

            <app-header-user></app-header-user>

            <div>
                <h2>El pago ha sido completado</h2>
                <p>¡El pago se ha completado satisfactoriamente!</p>
            </div>



        payment-success.component.ts:

            import { Component, OnInit } from '@angular/core';
            import { OrderState } from 'src/app/common/order-state';
            import { OrderService } from 'src/app/services/order.service';
            import { SessionStorageService } from 'src/app/services/session-storage.service';

            @Component({
            selector: 'app-payment-success',
            templateUrl: './payment-success.component.html',
            styleUrls: ['./payment-success.component.css']
            })
            export class PaymentSuccessComponent implements OnInit {

            constructor(private orderService:OrderService, private sessionStorage:SessionStorageService) { }

            ngOnInit(): void {
                console.log(this.sessionStorage.getItem('order'));
                let order = this.sessionStorage.getItem('order');
                let formData = new FormData();
                formData.append('id',order.id);
                formData.append('state', OrderState.CONFIRMED.toString());

                this.orderService.updateOrder(formData).subscribe(
                data => {
                    console.log(data)

                    console.log('LogoutComponent: '+this.sessionStorage.getItem('token'))
                this.sessionStorage.removeItem('token');
                console.log('LogoutComponent eliminado: '+this.sessionStorage.getItem('token'));
                }
                );
            }

            }


        data-payment.ts:

            export class DataPayment {
                constructor(public method:string,  public amount:string, public currency:string, public description:string){

                }
            }
        payment.service.ts:

            import { HttpClient } from '@angular/common/http';
            import { Injectable } from '@angular/core';
            import { DataPayment } from '../common/data-payment';
            import { Observable } from 'rxjs';
            import { UrlPaypalResponse } from '../common/url-paypal-response';
            import { HeaderService } from './header.service';

            @Injectable({
            providedIn: 'root'
            })
            export class PaymentService {
            private apiUrl:string = 'http://localhost:8085/api/v1/payments';

            constructor(private httpClient:HttpClient, private headerService : HeaderService) { }


            getUrlPaypalPayment(dataPayment:DataPayment):Observable<UrlPaypalResponse>{
                return this.httpClient.post<UrlPaypalResponse>(this.apiUrl, dataPayment, {headers:this.headerService.headers});
            }


            }


        session-storage.service.ts:

            import { Injectable } from '@angular/core';

            @Injectable({
            providedIn: 'root'
            })
            export class SessionStorageService {

            constructor() { }

            setItem(key:string, value:any){
                sessionStorage.setItem(key,JSON.stringify(value));
            }

            getItem(key:string){
                const item = sessionStorage.getItem(key);
                return item ? JSON.parse(item) : null;
            }

            removeItem(key:string){
                sessionStorage.removeItem(key);
            }

            clear(){
                sessionStorage.clear();
            }
            }


    backend:

        PaypalController.java:
            package com.harmonydealer.ecommerce.backend.infrastructure.rest;

            import com.harmonydealer.ecommerce.backend.domain.model.DataPayment;
            import com.harmonydealer.ecommerce.backend.domain.model.URLPaypalResponse;
            import com.harmonydealer.ecommerce.backend.infrastructure.service.PaypalService;
            import com.paypal.api.payments.Links;
            import com.paypal.api.payments.Payment;
            import com.paypal.base.rest.PayPalRESTException;
            import lombok.AllArgsConstructor;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.web.bind.annotation.*;
            import org.springframework.web.servlet.view.RedirectView;

            @RestController
            @AllArgsConstructor
            @CrossOrigin(origins = "http://localhost:4200")
            @RequestMapping("/api/v1/payments")
            @Slf4j
            public class PaypalController {
                private final PaypalService paypalService;
                private final String SUCCESS_URL = "http://localhost:8085/api/v1/payments/success";
                private final String CANCEL_URL = "http://localhost:8085/api/v1/payments/cancel";

                @PostMapping
                public URLPaypalResponse createPayment(@RequestBody DataPayment dataPayment){
                    try {
                        Payment payment = paypalService.createPayment(
                                Double.valueOf(dataPayment.getAmount()),
                                dataPayment.getCurrency(),
                                dataPayment.getMethod(),
                                "sale",
                                dataPayment.getDescription(),
                                CANCEL_URL,
                                SUCCESS_URL
                        );
                        for (Links links : payment.getLinks()){
                            if (links.getRel().equals("approval_url")){
                                return new URLPaypalResponse(links.getHref());
                            }
                        }
                    } catch (PayPalRESTException e) {
                        e.printStackTrace();
                    }

                    return new URLPaypalResponse("http://localhost:4200");
                }

                @GetMapping("/success")
                public RedirectView paymentSuccess(
                        @RequestParam("paymentId") String paymentId,
                        @RequestParam("PayerID") String payerId
                ){
                    log.info("Entrando al método paymentsucces");
                    log.info("paymentId: {}", paymentId);
                    log.info("payerId: {}", payerId);
                    try {
                        Payment payment = paypalService.executePayment(paymentId,payerId);
                        log.info("Estado del pago: {}",payment.getState());
                        if (payment.getState().equals("approved")){
                            log.info("Pago aprobado, redirigiendo al frontend");
                            return new RedirectView("http://localhost:4200/payment/success");
                        }
                    } catch (PayPalRESTException e) {
                        log.error("Error al ejecutar el pago", e);
                    }
                    log.warn("Pago no aprobado, redirigiendo al frontend");
                    return new RedirectView("http://localhost:4200");
                }

                @GetMapping("/cancel")
                public RedirectView paymentCancel(){
                    return new RedirectView("http://localhost:4200");
                }
            }

        PaypalService.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.service;

            import com.paypal.api.payments.*;
            import com.paypal.base.rest.APIContext;
            import com.paypal.base.rest.PayPalRESTException;
            import org.springframework.stereotype.Service;

            import java.util.ArrayList;
            import java.util.List;
            import java.util.Locale;

            @Service
            public class PaypalService {
                private final APIContext apiContext;

                public PaypalService(APIContext apiContext) {
                    this.apiContext = apiContext;
                }


                public Payment createPayment(
                        Double total,
                        String currency,
                        String method,
                        String intent,
                        String description,
                        String cancelUrl,
                        String successUrl
                ) throws PayPalRESTException {
                    Amount amount = new Amount();
                    amount.setCurrency(currency);
                    amount.setTotal(String.format(Locale.forLanguageTag(currency),"%.2f", total));

                    Transaction transaction = new Transaction();
                    transaction.setDescription(description);
                    transaction.setAmount(amount);

                    List<Transaction> transactions = new ArrayList<>();
                    transactions.add(transaction);

                    Payer payer = new Payer();
                    payer.setPaymentMethod(method);

                    Payment payment = new Payment();
                    payment.setIntent(intent);
                    payment.setPayer(payer);
                    payment.setTransactions(transactions);

                    RedirectUrls redirectUrls = new RedirectUrls();
                    redirectUrls.setReturnUrl(successUrl);
                    redirectUrls.setCancelUrl(cancelUrl);
                    payment.setRedirectUrls(redirectUrls);

                    return payment.create(apiContext);
                }

                public  Payment executePayment(
                        String paymentId,
                        String payerId
                ) throws PayPalRESTException {
                    Payment payment = new Payment();
                    payment.setId(paymentId);

                    PaymentExecution paymentExecution = new PaymentExecution();
                    paymentExecution.setPayerId(payerId);

                    return  payment.execute(apiContext,paymentExecution);

                }
            }

        PaypalConfig.java:

            package com.harmonydealer.ecommerce.backend.infrastructure.config;


            import com.paypal.base.rest.APIContext;
            import org.springframework.beans.factory.annotation.Value;
            import org.springframework.context.annotation.Bean;
            import org.springframework.context.annotation.Configuration;

            @Configuration
            public class PaypalConfig {
                @Value("${paypal.client.id}")
                private String clientId;
                @Value("${paypal.client.secret}")
                private String clientSecret;
                @Value("${paypal.mode}")
                private String mode;

                @Bean
                public APIContext apiContext(){
                    return new APIContext(clientId, clientSecret, mode);
                }
            }


        UrlPaypalResponse.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            import lombok.AllArgsConstructor;
            import lombok.Data;

            @Data
            @AllArgsConstructor
            public class URLPaypalResponse {
                private String url;
            }


        DataPayment.java:

            package com.harmonydealer.ecommerce.backend.domain.model;

            import lombok.Data;

            @Data
            public class DataPayment {
                private String method;
                private String amount;
                private String currency;
                private String description;
            }




