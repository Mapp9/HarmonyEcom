Backend
* > src
    * > main
        * > java
            * > com
                * > harmonydealer
                    * > ecommerce
                        * > backend
                            * > application
                                * - OrderService.java
                            * > domain
                                * > model
                                    * - Order.java
                                    * - OrderState.java
                                    * - OrderProduct.java
                                * > port
                                    * - IOrderRepository.java
                            * > infrastructure
                                * > adapter
                                    * - IOrderCrudRepository.java
                                    * - OrderCrudRepositoryImpl.java
                                * > entity
                                    * - OrderEntity.java
                                    * - OrderProductEntity.java
                                * > mapper
                                    * - IOrderProductMapper.java
                                * > rest
                                    * - OrderController.java
Frontend
* > src
    * > app
        * > common
            * - order-product.ts:
                export class OrderProduct {
                    constructor(
                        public id:number|null,
                        public productId:number,
                        public quantity:number,
                        public price:number
                    
                    ) {

                    }
                }

            * - order-state.ts:
                export class OrderProduct {
                    constructor(
                        public id:number|null,
                        public productId:number,
                        public quantity:number,
                        public price:number
                    
                    ) {

                    }
                }

            * - order.ts:
                import { OrderProduct } from "./order-product";
                import { OrderState } from "./order-state";

                export class Order {

                    constructor(
                        public id:number|null,
                        public dateCreated:Date,
                        public orderProducts:OrderProduct [],
                        public userId:number,
                        public orderState:OrderState
                    
                    ) {}

                    getTotal(){
                        let total = 0;
                        for(let orderProduct of this.orderProducts){
                            total += orderProduct.price * orderProduct.quantity;
                            console.log('Total: '+ total);
                        }
                    }
                }

        * > components
            * > orders
                * > order-history (Este es el componente que quiero desarrollar para visualizar las ordenes)
                    * - order-history.component.css 
                    * - order-history.component.html
                    * - order-history.component.ts
        * > service
            * - order.service.ts:
                import { HttpClient } from '@angular/common/http';
                import { Injectable } from '@angular/core';
                import { Order } from '../common/order';
                import { Observable } from 'rxjs';
                import { HeaderService } from './header.service';

                @Injectable({
                providedIn: 'root'
                })
                export class OrderService {
                private apiUrl : string = "http://localhost:8085/api/v1/orders";
                private update : string = 'update/state/order';
                constructor(private httpClient:HttpClient, private headerService : HeaderService) { }

                createOrder(order:Order):Observable<Order>{
                    return this.httpClient.post<Order>(this.apiUrl, order, {headers:this.headerService.headers});
                }

                updateOrder(formData:any):Observable<any>{
                    return this.httpClient.post(`${this.apiUrl}/${this.update}`, formData, {headers:this.headerService.headers});
                }

                getOrderByUser(userId:number):Observable<Order[]>{
                    return this.httpClient.get<Order[]>(`${this.apiUrl}/by-user/${userId}`, {headers:this.headerService.headers});
                }

                getOrderById(orderId:number):Observable<Order>{
                    return this.httpClient.get<Order>(`${this.apiUrl}/${orderId}`, {headers:this.headerService.headers})
                }
                }
