Backend
* > src/main/java/com/harmonydealer/ecommerce
    * > backend
        * > application
            * - UserService.java:
                package com.harmonydealer.ecommerce.backend.application;

                import com.harmonydealer.ecommerce.backend.domain.model.User;
                import com.harmonydealer.ecommerce.backend.domain.port.IUserRepository;
                import lombok.AllArgsConstructor;

                @AllArgsConstructor
                public class UserService {
                    private final IUserRepository iUserRepository;

                    public User save(User user){
                        return this.iUserRepository.save(user);
                    }
                    public Iterable<User> findAll(){
                        return this.iUserRepository.findAll();
                    }
                    public User findById(Integer id){
                        return this.iUserRepository.findById(id);
                    }
                    public User findByEmail(String email){
                        return this.iUserRepository.findByEmail(email);
                    }
                    public void deleteById(Integer id){
                        iUserRepository.deleteById(id);
                    }
                }

        * > domain
            * > model
                * - User.java:
                    package com.harmonydealer.ecommerce.backend.domain.model;

                    import lombok.AllArgsConstructor;
                    import lombok.Data;
                    import lombok.NoArgsConstructor;

                    import java.time.LocalDateTime;

                    @Data
                    @AllArgsConstructor
                    @NoArgsConstructor
                    public class User {
                        private Integer id;
                        private String username;
                        private String firstName;
                        private String lastName;
                        private String email;
                        private String address;
                        private String cellphone;
                        private String password;
                        private UserType userType;
                        private LocalDateTime dateCreated;
                        private LocalDateTime dateUpdated;
                    }

                * - UserType.java:
                        package com.harmonydealer.ecommerce.backend.domain.model;

                        public enum UserType {
                            ADMIN, USER
                        }
            * > port
                * - IUserRepository.java:
                    package com.harmonydealer.ecommerce.backend.domain.port;

                    import com.harmonydealer.ecommerce.backend.domain.model.User;

                    public interface IUserRepository {
                        User save(User user);
                        Iterable<User> findAll();
                        User findByEmail(String email);
                        User findById(Integer id);
                        void deleteById(Integer id);
                    }

        * > infrastructure
            * > adapter
                * - IUserCrudRepository.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.adapter;

                    import com.harmonydealer.ecommerce.backend.infrastructure.entity.UserEntity;
                    import org.springframework.data.repository.CrudRepository;

                    import java.util.Optional;

                    public interface IUserCrudRepository extends CrudRepository<UserEntity, Integer> {
                        Optional<UserEntity> findByEmail(String email);
                    }

                * - UserCrudRepositoryImpl.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.adapter;

                    import com.harmonydealer.ecommerce.backend.domain.model.User;
                    import com.harmonydealer.ecommerce.backend.domain.port.IUserRepository;
                    import com.harmonydealer.ecommerce.backend.infrastructure.mapper.UserMapper;
                    import lombok.AllArgsConstructor;
                    import org.springframework.stereotype.Repository;

                    @AllArgsConstructor
                    @Repository
                    public class UserCrudRepositoryImpl implements IUserRepository {
                        private final IUserCrudRepository iUserCrudRepository;
                        private final UserMapper userMapper;


                        @Override
                        public User save(User user) {
                            return userMapper.toUser(iUserCrudRepository.save(userMapper.toUserEntity(user)));
                        }

                        @Override
                        public Iterable<User> findAll(){
                            return userMapper.toUsers(iUserCrudRepository.findAll());
                        }

                        @Override
                        public User findByEmail(String email) {
                            return userMapper.toUser(iUserCrudRepository.findByEmail(email).orElseThrow(
                                    ()-> new  RuntimeException("El usuario con email :"+email+" no ha sido encontrado.")
                            ));
                        }

                        @Override
                        public User findById(Integer id) {
                            return userMapper.toUser(iUserCrudRepository.findById(id).get());
                        }

                        @Override
                        public void deleteById(Integer id) {
                            iUserCrudRepository.findById(id).orElseThrow(
                                    ()-> new RuntimeException("Usuario con id: " + id + " no existe")
                            );
                            iUserCrudRepository.deleteById(id);
                        }
                    }
            * > config
                * - BeanConfiguration.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.config;

                    import com.harmonydealer.ecommerce.backend.application.*;
                    import com.harmonydealer.ecommerce.backend.domain.port.ICategoryRepository;
                    import com.harmonydealer.ecommerce.backend.domain.port.IOrderRepository;
                    import com.harmonydealer.ecommerce.backend.domain.port.IProductRepository;
                    import com.harmonydealer.ecommerce.backend.domain.port.IUserRepository;
                    import org.springframework.context.annotation.Bean;
                    import org.springframework.context.annotation.Configuration;

                    @Configuration
                    public class BeanConfiguration {

                        @Bean
                        public UserService userService(IUserRepository iUserRepository){
                            return new UserService(iUserRepository);
                        }

                        @Bean
                        public CategoryService categoryService(ICategoryRepository iCategoryRepository){
                            return new CategoryService(iCategoryRepository);
                        }

                        @Bean
                        public ProductService productService(IProductRepository iProductRepository, UploadFile uploadFile){
                            return new ProductService(iProductRepository, uploadFile);
                        }
                        @Bean
                        public OrderService orderService(IOrderRepository iOrderRepository){
                            return new OrderService(iOrderRepository);
                        }

                        @Bean
                        public UploadFile uploadFile(){
                            return new UploadFile();
                        }

                        @Bean
                        public RegistrationService registrationService(IUserRepository iUserRepository){
                            return new RegistrationService(iUserRepository);
                        }
                    }
                * - SecurityConfig.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.config;

                    import com.harmonydealer.ecommerce.backend.infrastructure.jwt.JWTAuthorizationFilter;
                    import lombok.extern.slf4j.Slf4j;
                    import org.springframework.context.annotation.Bean;
                    import org.springframework.context.annotation.Configuration;
                    import org.springframework.security.authentication.AuthenticationManager;
                    import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
                    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
                    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
                    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
                    import org.springframework.security.web.SecurityFilterChain;
                    import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
                    import org.springframework.web.cors.CorsConfiguration;

                    import java.util.Arrays;

                    @Configuration
                    @EnableWebSecurity
                    @Slf4j
                    public class SecurityConfig {

                        private final JWTAuthorizationFilter jwtAuthorizationFilter;

                        public SecurityConfig(JWTAuthorizationFilter jwtAuthorizationFilter) {
                            this.jwtAuthorizationFilter = jwtAuthorizationFilter;
                        }

                        @Bean
                        public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
                            return authenticationConfiguration.getAuthenticationManager();
                        }

                        @Bean
                        public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {
                            httpSecurity.cors(
                                    cors -> cors.configurationSource(
                                            request -> {
                                                CorsConfiguration corsConfiguration = new CorsConfiguration();
                                                corsConfiguration.setAllowedOrigins(Arrays.asList("*"));
                                                corsConfiguration.setAllowedMethods(Arrays.asList("*"));
                                                corsConfiguration.setAllowedHeaders(Arrays.asList("*"));
                                                return corsConfiguration;
                                            }
                                    ))
                                    .csrf(csrf -> csrf.disable()).authorizeHttpRequests(
                                    auth-> auth.requestMatchers("/api/v1/admin/categories/**").hasRole("ADMIN")
                                            .requestMatchers("/api/v1/admin/products/**").hasRole("ADMIN")
                                            .requestMatchers("/api/v1/orders/**").hasRole("USER")
                                            .requestMatchers("/api/v1/payments/success").permitAll()
                                            .requestMatchers("/api/v1/payments/**").hasRole("USER")
                                            .requestMatchers("/api/v1/users/**").permitAll()
                                            .requestMatchers("/images/**").permitAll()
                                            .requestMatchers("/api/v1/home/**").permitAll()
                                            .requestMatchers("/api/v1/security/**").permitAll().anyRequest().authenticated()

                            ).addFilterAfter(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class);

                            return httpSecurity.build();

                        }

                        @Bean
                        public BCryptPasswordEncoder passwordEncoder (){
                            return new BCryptPasswordEncoder();
                        }
                    }

            * > entity
                * - UserEntity.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.entity;

                    import com.harmonydealer.ecommerce.backend.domain.model.OrderState;
                    import jakarta.persistence.*;
                    import lombok.Data;
                    import org.hibernate.annotations.CreationTimestamp;

                    import java.time.LocalDateTime;
                    import java.util.List;


                    @Data
                    @Entity
                    @Table(name = "orders")
                    public class OrderEntity {

                        @Id
                        @GeneratedValue(strategy = GenerationType.IDENTITY)
                        private Integer id;
                        @CreationTimestamp
                        private LocalDateTime dateCreated;
                        @Enumerated(value = EnumType.STRING)
                        private OrderState orderState;
                        @ManyToOne
                        private UserEntity userEntity;
                        @OneToMany(mappedBy = "orderEntity", cascade = CascadeType.PERSIST)
                        private List<OrderProductEntity> orderProducts;
                    }

            * > mapper
                * - UserMapper.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.mapper;

                    import com.harmonydealer.ecommerce.backend.domain.model.User;
                    import com.harmonydealer.ecommerce.backend.infrastructure.entity.UserEntity;
                    import org.mapstruct.InheritInverseConfiguration;
                    import org.mapstruct.Mapper;
                    import org.mapstruct.Mapping;
                    import org.mapstruct.Mappings;

                    @Mapper(componentModel = "spring")
                    public interface UserMapper {
                        @Mappings(
                                {
                                        @Mapping(source = "id", target = "id"),
                                        @Mapping(source = "username", target = "username"),
                                        @Mapping(source = "firstName", target = "firstName"),
                                        @Mapping(source = "lastName", target = "lastName"),
                                        @Mapping(source = "email", target = "email"),
                                        @Mapping(source = "address", target = "address"),
                                        @Mapping(source = "cellphone", target = "cellphone"),
                                        @Mapping(source = "password", target = "password"),
                                        @Mapping(source = "userType", target = "userType"),
                                        @Mapping(source = "dateCreated", target = "dateCreated"),
                                        @Mapping(source = "dateUpdated", target = "dateUpdated")
                                }
                        )
                        User toUser(UserEntity userEntity);
                        Iterable<User> toUsers(Iterable<UserEntity> userEntities);

                        @InheritInverseConfiguration
                        UserEntity toUserEntity(User user);
                    }

            * > rest
                * - UserController.java:
                    package com.harmonydealer.ecommerce.backend.infrastructure.rest;

                    import com.harmonydealer.ecommerce.backend.application.UserService;
                    import com.harmonydealer.ecommerce.backend.domain.model.User;
                    import org.springframework.http.HttpStatus;
                    import org.springframework.http.ResponseEntity;
                    import org.springframework.web.bind.annotation.*;

                    @RestController
                    @RequestMapping("/api/v1/users")
                    @CrossOrigin(origins = "http://localhost:4200")
                    public class UserController {
                        private final UserService userService;

                        public UserController(UserService userService) {
                            this.userService = userService;
                        }

                        @PostMapping
                        public User save(@RequestBody User user){
                            return userService.save(user);
                        }

                        @GetMapping
                        public ResponseEntity<Iterable<User>> findAll(){
                            return ResponseEntity.ok(userService.findAll());
                        }

                        @GetMapping("/{id}")
                        public User findById(@PathVariable Integer id){
                            return userService.findById(id);
                        }

                        @DeleteMapping("/{id}")
                        public ResponseEntity<HttpStatus> deleteById(@PathVariable Integer id){
                            userService.deleteById(id);
                            return ResponseEntity.ok().build();
                        }
                    }

Frontend
* > src
    * > app
        * > common
            * - order-product.ts:
                export class OrderProduct {
                    constructor(
                        public id:number|null,
                        public productId:number,
                        public quantity:number,
                        public price:number
                    
                    ) {

                    }
                }

            * - order-state.ts:
                export class OrderProduct {
                    constructor(
                        public id:number|null,
                        public productId:number,
                        public quantity:number,
                        public price:number
                    
                    ) {

                    }
                }

            * - order.ts:
                import { OrderProduct } from "./order-product";
                import { OrderState } from "./order-state";

                export class Order {

                    constructor(
                        public id:number|null,
                        public dateCreated:Date,
                        public orderProducts:OrderProduct [],
                        public userId:number,
                        public orderState:OrderState
                    
                    ) {}

                    getTotal(){
                        let total = 0;
                        for(let orderProduct of this.orderProducts){
                            total += orderProduct.price * orderProduct.quantity;
                            console.log('Total: '+ total);
                        }
                    }
                }

        * > components
            * > orders
                * > order-history (Este es el componente que quiero desarrollar para visualizar las ordenes)
                    * - order-history.component.css 
                    * - order-history.component.html
                    * - order-history.component.ts
        * > service
            * - order.service.ts:
                import { HttpClient } from '@angular/common/http';
                import { Injectable } from '@angular/core';
                import { Order } from '../common/order';
                import { Observable } from 'rxjs';
                import { HeaderService } from './header.service';

                @Injectable({
                providedIn: 'root'
                })
                export class OrderService {
                private apiUrl : string = "http://localhost:8085/api/v1/orders";
                private update : string = 'update/state/order';
                constructor(private httpClient:HttpClient, private headerService : HeaderService) { }

                createOrder(order:Order):Observable<Order>{
                    return this.httpClient.post<Order>(this.apiUrl, order, {headers:this.headerService.headers});
                }

                updateOrder(formData:any):Observable<any>{
                    return this.httpClient.post(`${this.apiUrl}/${this.update}`, formData, {headers:this.headerService.headers});
                }

                getOrderByUser(userId:number):Observable<Order[]>{
                    return this.httpClient.get<Order[]>(`${this.apiUrl}/by-user/${userId}`, {headers:this.headerService.headers});
                }

                getOrderById(orderId:number):Observable<Order>{
                    return this.httpClient.get<Order>(`${this.apiUrl}/${orderId}`, {headers:this.headerService.headers})
                }
                }


"gon.m@test.com"
"Test.1234"